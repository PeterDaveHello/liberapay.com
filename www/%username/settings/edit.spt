from liberapay.constants import PRIVACY_FIELDS
from liberapay.models.participant import Participant
from liberapay.utils import b64encode_s, get_participant

[---]

request.allow('POST')

body = request.body
out = {}

p = get_participant(state, restrict=True, allow_member=True)

if 'new-password' in body:
    if not p.is_person:
        raise response.error(403)
    if p.session_token and p.session_token.endswith('.em'):
        pass  # user logged in via email, allow resetting password
    elif not p.password:
        pass  # user doesn't have a password yet, allow adding one
    else:
        p = Participant.authenticate('username', 'password',
                                     request.path['username'],
                                     body['cur-password'])
        if not p:
            raise response.error(403, _("Incorrect password"))
    p.update_password(body['new-password'])
    out['msg'] = _("Your password has been changed.")

elif 'privacy' in body:
    if not p.is_person:
        raise response.error(403)
    fields = body['privacy'].split()
    for field in fields:
        if field not in PRIVACY_FIELDS:
            continue
        value = body.get(field) == 'on'
        if isinstance(getattr(p, field), bool):
            website.db.run("""
                UPDATE participants
                   SET {0} = %s
                 WHERE id = %s
            """.format(field), (value, p.id))
        else:
            p.update_bit(field, 1, value)
    out['msg'] = _("Your privacy settings have been changed.")

elif 'username' in body:
    p.change_username(body['username'], recorder=user)
    response.redirect(p.path('edit'))

elif 'main_currency' in body:
    if p.kind == 'group' and body.get('confirmed') != 'true':
        back_to = p.path('edit')
        msg = _(
            "Please confirm the modification of this team's reference currency. "
            "The takes of all team members will be converted to the new currency "
            "using today's exchange rate, and a notification will be sent to all "
            "members."
        )
        raise response.render('templates/confirm.spt', state, cls='warning', msg=msg, back_to=back_to)
    new_currency = body['main_currency']
    old_currency = p.main_currency
    change_currency = new_currency != old_currency
    if p.kind == 'group':
        accept_all_currencies = False
    else:
        accept_all_currencies = body.get('accept_all_currencies') == 'yes'
    change_policy = accept_all_currencies != p.accept_all_currencies and p.kind != 'group'
    if (change_currency or change_policy) and not accept_all_currencies:
        foreign_donations = website.db.all("""
            SELECT t.*
              FROM current_tips t
             WHERE t.tippee = %s
               AND t.amount > 0
               AND t.amount::currency <> %s
        """, (p.id, new_currency))
        if foreign_donations and p.kind == 'group':
            raise response.error(501, _(
                "It's not yet possible to modify the currency of a team which is already "
                "receiving donations. Sorry."
            ))
        if foreign_donations and body.get('confirmed') != 'true':
            back_to = p.path('edit')
            total = Money.sum((t.amount.convert(new_currency) for t in foreign_donations), new_currency)
            msg = _(
                "You currently receive the equivalent of {money_amount} per week from donations in "
                "foreign currencies. These donations will not be converted to your main currency.",
                money_amount=total
            )
            raise response.render('templates/confirm.spt', state, cls='info', msg=msg, back_to=back_to)
    if change_currency:
        p.change_main_currency(new_currency, user)
    if change_policy:
        website.db.run("""
            UPDATE participants
               SET accept_all_currencies = %s
             WHERE id = %s
        """, (accept_all_currencies, p.id))
        p.set_attributes(accept_all_currencies=accept_all_currencies)
    response.redirect(p.path('edit'))

else:
    raise response.error(400, "no known key found in body")

if request.headers.get(b'X-Requested-With') != b'XMLHttpRequest':
    back_to = body.get('back_to') or p.path('settings/')
    try:
        assert '?' not in back_to
        assert '#' not in back_to
        back_to += '?success=' + b64encode_s(out["msg"])
    except Exception as e:
        website.tell_sentry(e, state)
    response.redirect(back_to, trusted_url=False)

[---] text/html

[---] application/json
out
